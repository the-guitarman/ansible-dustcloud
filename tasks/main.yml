---
# tasks file for dustcloud

- name: Charging station
  pause:
    prompt: "In order for the firmware to be updated, the device must be at the charging station. Did you put the device to charging station for updating firmware? (type yes or no)"
    echo: yes
  register: is_at_charging_station

- name: Network connections
  when: is_at_charging_station.user_input == 'yes'
  pause:
    prompt: "Do you have a LAN connection to the remote host ({{ ansible_hostname }}) and does the remote host have a wifi device? (type yes or no)"
    echo: yes
  register: has_network_connection

- name: "Network connection"
  when: is_at_charging_station.user_input == 'yes' and 
        has_network_connection.user_input == 'yes'
  block: 

    - name: Check role variables
      block:
        - name: "Variable: account"
          debug: 
            msg: "account value is: {{ account }}"
          failed_when: account == '<your user name>'
        - name: "Variable: roborock_directory"
          debug: 
            msg: "roborock_directory value is: {{ roborock_directory }}"
          failed_when: roborock_directory|length == 0
        - name: "Variable: version.valetudo"
          debug: 
            msg: "version.valetudo value is: {{ version.valetudo }}"
          failed_when: version.valetudo|length == 0
        - name: "Variable: version.firmware"
          debug: 
            msg: "version.firmware value is: {{ version.firmware }}"
          failed_when: version.firmware|length == 0

    - name: Register file stats
      block:
        - name: Check valetudo file exists
          stat:
            path: "/home/{{ account }}/{{ roborock_directory }}/valetudo/valetudo"
          register: valetudo_stat
        - name: Check valetudo config file exists
          stat:
            path: "/home/{{ account }}/{{ roborock_directory }}/valetudo/deployment/valetudo.conf"
          register: valetudo_config_stat
        - name: Check roborock firmware file exists
          stat: 
            path: "/home/{{ account }}/{{ roborock_directory }}/firmware"
          register: firmware_pkg_stat
        - name: Check roborock language pack file exists
          stat: 
            path: "/home/{{ account }}/{{ roborock_directory }}/firmware/de.pkg"
          register: language_de_pkg_stat

    - name: Install dustcloud
      when: "firmware_pkg_stat.stat.exists == false and
            language_de_pkg_stat.stat.exists == false"
      block:
        - name: Install required packages
          apt:
            name:
              - wpasupplicant
              - ccrypt
              - git
              - wget
              - unzip
              - dos2unix
              - python3
              - python3-pip
              - python3-venv
              - python3-dev
              - libffi-dev
              - libssl-dev
          become: true
          become_user: 'root'

        - name: Create a python environment, install python3 packages
          shell: |
            python3 -m venv .venv
            pip3 install wheel
            pip3 install python-miio

        - name: "Remove directory /home/{{ account }}/{{ roborock_directory }}"
          file:
            path: "/home/{{ account }}/{{ roborock_directory }}"
            mode: '0750'
            owner: "{{ account }}"
            group: "{{ account }}"
            state: absent

        - name: "Clone dustcloud git repo"
          git:
            repo: 'https://github.com/dgiese/dustcloud.git'
            dest: "/home/{{ account }}/{{ roborock_directory }}"
            force: yes
            clone: yes
            update: yes

        - name: Download valetudo
          when: valetudo_stat.stat.exists == false
          block:
            - name: "Create directory /home/{{ account }}/{{ roborock_directory }}/valetudo"
              file:
                path: "/home/{{ account }}/{{ roborock_directory }}/valetudo"
                mode: '0750'
                owner: "{{ account }}"
                group: "{{ account }}"
                state: directory
            - name: Download valetudo
              get_url:
                url: "https://github.com/Hypfer/Valetudo/releases/download/{{ version.valetudo }}/valetudo"
                dest: "/home/{{ account }}/{{ roborock_directory }}/valetudo/"

        - name: Download valetudo Config
          when: valetudo_config_stat.stat.exists == false
          block:
            - name: "Create directory /home/{{ account }}/{{ roborock_directory }}/valetudo/deployment"
              file:
                path: "/home/{{ account }}/{{ roborock_directory }}/valetudo/deployment"
                mode: '0750'
                owner: "{{ account }}"
                group: "{{ account }}"
                state: directory
            - name: Download valetudo.conf
              get_url:
                url: "https://github.com/Hypfer/Valetudo/raw/master/deployment/valetudo.conf"
                dest: "/home/{{ account }}/{{ roborock_directory }}/valetudo/deployment/"

        - name: Download more valetudo files
          block:
            - name: "Create directory /home/{{ account }}/{{ roborock_directory }}/valetudo/deployment/etc"
              file:
                path: "/home/{{ account }}/{{ roborock_directory }}/valetudo/deployment/etc"
                mode: '0750'
                owner: "{{ account }}"
                group: "{{ account }}"
                state: directory
            - name: Download hosts
              get_url:
                url: "https://github.com/Hypfer/Valetudo/raw/master/deployment/etc/hosts"
                dest: "/home/{{ account }}/{{ roborock_directory }}/valetudo//deployment/etc/"
            - name: Download rc.local
              get_url:
                url: "https://github.com/Hypfer/Valetudo/raw/master/deployment/etc/rc.local"
                dest: "/home/{{ account }}/{{ roborock_directory }}/valetudo//deployment/etc/"

        - name: Download rrlogd-patcher
          block:
            - name: "Create directory /home/{{ account }}/{{ roborock_directory }}/rrlogd-patcher"
              file:
                path: "/home/{{ account }}/{{ roborock_directory }}/rrlogd-patcher"
                mode: '0750'
                owner: "{{ account }}"
                group: "{{ account }}"
                state: directory
            - name: Download patcher.py
              get_url:
                url: "https://raw.githubusercontent.com/JohnRev/rrlogd-patcher/master/patcher.py"
                dest: "/home/{{ account }}/{{ roborock_directory }}/rrlogd-patcher"

        - name: Download new firmware
          when: firmware_pkg_stat.stat.exists == false or
                language_de_pkg_stat.stat.exists == false
          block:
            - name: "Create directory /home/{{ account }}/{{ roborock_directory }}/firmware"
              file:
                path: "/home/{{ account }}/{{ roborock_directory }}/firmware"
                mode: '0750'
                owner: "{{ account }}"
                group: "{{ account }}"
                state: directory
            - name: Download firmware #https://github.com/dgiese/dustcloud/wiki/Xiaomi-Vacuum-Firmware#tested-firmware
              get_url:
                url: "https://cdn.awsbj0.fds.api.mi-img.com/rubys/updpkg/{{ version.firmware }}.fullos.pkg"
                dest: "/home/{{ account }}/{{ roborock_directory }}/firmware"
              when: firmware_pkg_stat.stat.exists == false
            - name: Download language pack #https://github.com/dgiese/dustcloud/wiki/Xiaomi-Vacuum-Firmware#tested-firmware
              get_url:
                url: "https://dustbuilder.xvm.mit.edu/pkg/voice/de.pkg"
                dest: "/home/{{ account }}/{{ roborock_directory }}/firmware"
              when: language_de_pkg_stat.stat.exists == false

        - openssh_keypair:
            path: "/home/{{ account }}/.ssh/id_rsa_dustcloud"
            owner: "{{ account }}"
            group: "{{ account }}"
            mode: '0400'
            force: no
            size: 4096
            state: present
            type: rsa

        - name: "Create directory /home/{{ account }}/{{ roborock_directory }}/image"
          file:
            path: "/home/{{ account }}/{{ roborock_directory }}/image"
            mode: '0750'
            owner: "{{ account }}"
            group: "{{ account }}"
            state: directory

        - name: Patch the firmware and create the image
          shell: 
            cmd: "../devices/xiaomi.vacuum/firmwarebuilder/imagebuilder.sh --firmware=../firmware/{{ version.firmware }}.fullos.pkg --soundfile=../firmware/de.pkg --public-key=/home/{{ account }}/.ssh/id_rsa_dustcloud.pub --valetudo-path=../valetudo --disable-firmware-updates --ntpserver=fritz.box --rrlogd-patcher=../rrlogd-patcher/patcher.py --replace-adbd"
            chdir: "/home/{{ account }}/{{ roborock_directory }}/image"
          become: true
          become_user: 'root'


    - name: "Reconfigure remote host {{ ansible_host }} wifi"
      block:

        - name: Reset the wifi of roborock vacuum cleaner
          pause:
            prompt: "Press and hold both buttons of the roborock vacuum cleaner beside the power button for some seconds till the device confirms with: 'The wifi will be reseted.'. As an alternative press the reset pin under the lid. Did you have reset the device? (type yes or no)"
            echo: yes
          register: is_wifi_reset

        - name: Connect to roborock vacuum cleaner
          when: "is_wifi_reset.user_input == 'yes'"
          become: true
          become_user: root
          block:

            - name: "Find wifi device"
              shell: 'ls /sys/class/ieee80211/*/device/net/'
              register: wifi_network_device_found
            - name: "Set wifi device, if available"
              set_fact:
                wifi_network_device: "{{ wifi_network_device_found.stdout }}"
              when: wifi_network_device_found.stdout | length > 0

            - name: Scan for roborock wifi ssid
              shell: 'iwlist {{ wifi_network_device }} scan | grep ESSID | grep "roborock-vacuum" | cut -d "\"" -f 2'
              register: roborock_wifi_ssid_found
            - name: "Set roborock wifi ssid, if found"
              set_fact:
                roborock_wifi_ssid: "{{ roborock_wifi_ssid_found.stdout }}"
              when: roborock_wifi_ssid_found.stdout | length > 0

            - name: Type in roborock wifi ssid
              pause:
                prompt: "What is the roborock wifi ssid? (Default: {{ roborock_wifi_ssid }})"
                echo: yes
              register: roborock_wifi_ssid_2
            - name: Check roborock wifi ssid or set a default
              set_fact:
                roborock_wifi_ssid: roborock_wifi_ssid_2.user_input
              when: roborock_wifi_ssid_2.user_input != ""
            - name: "Roborock wifi ssid set to"
              debug: 
                msg: "{{ roborock_wifi_ssid }}"
              when: roborock_wifi_ssid_2.user_input == ""

            # https://github.com/WanderlandTravelers/ansible-wpa_supplicant-role/blob/master/templates/etc/wpa_supplicant/wpa_supplicant.conf.j2
            - name: "Install roborock wpa_supplicant-{{ wifi_network_device }}.conf" 
              template: 
                src: "templates/wpa_supplicant.conf.j2"
                dest: "/etc/wpa_supplicant/wpa_supplicant-{{ wifi_network_device }}.conf"
                owner: 'root'
                group: 'root'
                mode: '0644'
                #block_start_string: "{%"
                #block_end_string: "%}"
                #variable_start_string: "{{"
                #variable_end_string: "}}"
            - name: kill-wpa-supplicant
              include_tasks: tasks/kill_wpa_supplicant.yml
            - name: start-roborock-wpa-supplicant
              shell: "wpa_supplicant -B -i{{ wifi_network_device }} -Dnl80211,wext -c /etc/wpa_supplicant/wpa_supplicant-{{ wifi_network_device }}.conf"

            - name: "Test 1 reachability of {{ roborock_wifi_ip_address }}"
              wait_for:
                delay: 10
                host: "{{ roborock_wifi_ip_address }}"
                port: 53
                state: started
                timeout: 300
            - name: "Test 2 reachability of {{ roborock_wifi_ip_address }}"
              shell: "ping -c 4 {{ roborock_wifi_ip_address }}"
              register: roborock_wifi_ip_address_ping_test
              when: roborock_wifi_ip_address | ipaddr | length >= 7 and
                    roborock_wifi_ip_address | ipaddr | length <= 15
              failed_when: "roborock_wifi_ip_address_ping_test.rc > 1"
            - name: "Reachability test result"
              debug: 
                msg: "Reachability test of {{ roborock_wifi_ip_address }} failed. Can not flash the new firmware to the roborock device. All next role tasks will be skipped."
              when: roborock_wifi_ip_address_ping_test.rc > 0



            - name: Flash new firmware to roborock device
              when: "roborock_wifi_ip_address_ping_test.rc == 0"
              block:
                - name: Check new firmware file exists
                  stat: 
                    path: "/home/{{ account }}/{{ roborock_directory }}/image/output/{{ version.firmware }}.fullos.pkg"
                  register: created_firmware

                - name: Flash new firmware to roborock device
                  when: "created_firmware.stat.exists == true"
                  block:
                    - name: Flashing roborock vacuum cleaner
                      pause:
                        prompt: "In the next step the dustcloud firmware will be flashed to your roborock vacuum cleaner. This takes 5-10 minutes. Do not switch off the device during this time! Do it now? (yes or no)"
                        echo: yes
                      register: flash_roborock_now      

                    - name: "Flash the roborock vacuum cleaner"
                      shell: 
                        cmd: "python3 /home/{{ account }}/{{ roborock_directory }}/devices/xiaomi.vacuum/firmwarebuilder/flasher.py -f output/{{ version.firmware }}.fullos.pkg -a {{ roborock_wifi_ip_address }}"
                        chdir: "/home/{{ account }}/{{ roborock_directory }}/image"
                      when: flash_roborock_now.user_input == 'yes'
                      register: flash_result
                    - name: Replace newlines in flash result
                      set_fact:
                        flash_result: "{{ flash_result.stdout | replace('\n', '') | lower }}"
                    - name: kill-wpa-supplicant
                      include_tasks: tasks/kill_wpa_supplicant.yml
                    - name: start-default-wpa-supplicant
                      shell: "wpa_supplicant -B -i{{ wifi_network_device }} -Dnl80211,wext -c /etc/wpa_supplicant/wpa_supplicant.conf"
                    - name: "Remove file /etc/wpa_supplicant/wpa_supplicant-{{ wifi_network_device }}.conf"
                      file:
                        path: "/etc/wpa_supplicant/wpa_supplicant-{{ wifi_network_device }}.conf"
                        state: absent

                    - name: "It should be done."
                      when: "flash_roborock_now.user_input == 'yes' and
                             'firmware downloaded successfully' in flash_result"
                      block: 
                        - name: "Connect to the roborock wifi"
                          pause:
                            prompt: "Connect your computer to the roborock wifi ({{ roborock_wifi_ssid }}) and open this address in your browser: http://{{ roborock_wifi_ip_address }}"
                            echo: yes
                        - name: "Configure roborock wifi"
                          pause:
                            prompt: "At the website klick to Settings -> WIFI -> WIFI Settings and change the roborock wifi settings to connect it with your private wifi. After save, the roborock should reboot."
                            echo: yes 
                        - name: "Connect to your private wifi"
                          pause:
                            prompt: "Connect your computer to your private wifi and open this address in your browser, to see it works: http://rockrobo/"
                            echo: yes

